.fp 5 CW
.de X		\" literal font
.ft 5
.if !\\$1 \&\\$1 \\$2 \\$3 \\$4 \\$5 \\$6 \f1
..
.de XR
.}S 5 1 \& "\\$1" "\\$2" "\\$3" "\\$4" "\\$5" "\\$6"
..
.de RX
.}S 1 5 \& "\\$1" "\\$2" "\\$3" "\\$4" "\\$5" "\\$6"
..
.de XI
.}S 5 2 \& "\\$1" "\\$2" "\\$3" "\\$4" "\\$5" "\\$6"
..
.de IX
.}S 2 5 \& "\\$1" "\\$2" "\\$3" "\\$4" "\\$5" "\\$6"
..
.de EX		\" start example
.ta 1i 2i 3i 4i 5i 6i
.PP
.RS 
.PD 0
.ft 5
.nf
..
.de EE		\" end example
.fi
.ft
.PD
.RE
.PP
..
.TH TW 1
.SH NAME
tw \- file tree walk
.SH SYNOPSIS
.B tw
[
.B \-imnpqHILPX
] [
.B \-a
.I args
] [
.B \-c
argcount
] [
.B \-d
.I dir
] [
.B \-e
.I expr
] [
.B \-f
.I find
] [
.B \-s
.I cmdsize
] [
.B \-F
.I codes
] [
.B \-G
.I code-format
] [
.B \-S
.I separator
] [
.B \-
]
.I cmd
[
.I "arg ..."
]
.SH DESCRIPTION
.I tw
recursively descends the file tree rooted at the current directory
and lists the pathname of each file found.
If
.I "cmd arg ..."
is specified then the pathnames are collected and appended to the end of the
.I arg
list and
.I cmd
is executed as if
.IR execvp (2)
were used.
.I cmd
may be executed more than once if the combined size of the pathnames
exceeds system argument limits.
If
.BI \-f " find"
is specified then the fast find pattern
.I find
is used to match pathnames rooted at
.B .
or the
.B \-d
directories
from the fast find list that is updated each night.
Files that do not currently exist and files created since the list
was last updated are silently ignored.
Fast find is enabled by the presence of the
.B find.codes
list in
.B /usr/local/share/lib/find
or
.B /usr/lib/find
or a valid list pointed to by the environment variable
.BR FINDCODES .
Public fast find list updates require sufficient privelege and are usually
done nightly by the local administrator.
If the last option is
.B \-
and
.BI \-f " find"
was not specified then the pathnames are read, one per line,
from the standard input.
For
.B \-
the
.BI \-d " dir"
options are ignored and directories are not recursively traversed.
The options are:
.TP
.BI \-a " args"
The first
.I arg
named
.I args
is replaced by the current pathname list before
.I cmd
is executed.
.TP
.BI \-c " argcount"
.I cmd
is executed after
.I argcount
arguments are collected.
.TP
.BI \-d " dir"
The file tree traversal is rooted at
.IR dir .
Multiple
.B \-d
directories are traversed in order from left to right.
If the last option was
.B \-
then the
.B \-d
options are ignored.
.TP
.BI \-e " expr"
.I expr
defines expression functions that control the tree traversal.
Multiple
.B \-e
expressions are parsed in order from left to right.
Expression syntax is described below.
The expression functions are:
.RS
.TP
.X action
Evaluated for each file in which
.X select
returns non-zero.
The default
.X action
lists each selected file, one per line, on the standard output.
.TP
.X begin
Evaluated once before the traversal begins.
The return value is ignored.
.TP
.X end
Evaluated once after the traversal ends.
The return value is ignored.
.TP
.X select
Evaluated once for each visited file.
If the return value is non-zero then
.X action
is evaluated.
The default
.X select
return value is always non-zero.
.TP
.X sort
Consists of a single file status identifier that
is used to sort files within directories.
.X !
before the identifier reverses the sort order.
.X ~
before the identifier ignores case.
File status identifiers are described below.
.RE
.TP
.B \-i
Ignore
.I cmd
errors and inaccessible files and directories.
.TP
.B \-m
Before visiting a selected file select and visit intermediate directories
leading to the file that have not already been selected.
.TP
.B \-n
Evaluate the
.XR begin ,
.X select
and
.X end
expressions but eliminate the tree traversal.
Useful when one of the expressions is an
.X exit()
call with a constant expression argument.
.TP
.B \-p
A directory is visited after its entries have been processed.
Normally directories are visited first.
.TP
.B \-q
Emit a query for each visited path.
An affirmative response accepts the path,
a negative response rejects the path,
and a quit response exits
.IR tw .
.TP
.B \-t
Trace
.I cmd
execution.
.TP
.B \-H
Enable metaphysical path resolution:
symbolic links on the command line are followed,
symbolic links encountered in the traversal are not.
This is the default.
.TP
.B \-I
Ignore case in path comparisons.
.TP
.B \-L
Enable logical path resolution: all symbolic links are followed.
.TP
.B \-P
Enable physical path resolution: no symbolic links are followed.
.TP
.B \-X
Prevent the traversal from crossing mount points.
.SS Expressions
A function expression is defined by:
.EX
    \fIfunction-name : statement-list\fP
.EE
where
.I function-name
is one of
.XR action ,
.XR begin ,
.XR end ,
.X select
or
.X sort
and each statement in
.I statement-list
is an
.IR expr (3)
C style expression, including
.XI int " variable, ..."
and
.XI float " variable, ..."
declarations,
.X (int)
and
.X (float)
casts,
.XR if \- else
conditionals,
.X for
and
.X while
loops, and
.XR { " ... " }
blocks.
The trailing
.B ;
in any expression is optional.
.X select
is assumed when
.I function-name
is omitted.
The expression value is the value of the last evaluated expression in
.IR statement-list .
Numbers and comments follow C syntax.
String operands must be quoted with either
\fB"..."\fP or \fB'...'\fP.
String comparisons
.RB ( ==
and
.BR != )
treat the right hand operand as a
.IR ksh (1)
file match pattern.
.PP
The expressions operate on the current pathname file status
that is provided by the following field identifiers,
most of which are described under
.XI st_ field
in
.IR stat (2):
.TP
.X  atime
If
.XR atime ,
.X ctime
or
.X mtime
is the left hand side operand of a binary operator then the
right hand side operand may be a string that is interpreted
as a
.IR tm (3)
date expression.
.TP
.X  blocks
The number of 1k blocks in the file.
.TP
.X  ctime
.TP
.X  dev
.TP
.X fstype
The file system type name.
The default is
.XR 'ufs' .
.TP
.X  gid
If
.X gid
is the left hand side operand of a binary operator then the
right hand side operand may be a string that is interpreted
as a group name.
.TP
.X gidok
.X 1
if
.X gid
is a valid group id in the system database,
.X 0
otherwise.
.TP
.X  ino
.TP
.X level
The depth of the file relative to the traversal root.
.TP
.X local
An integer valued field associated with each active object in the traversal.
This field may be assigned.
The initial value is 0.
Multiple
.X local
elements may be declared by
.XI "int local." element1... ; .
In this case the
.X local
field itself is not accessible.
.TP
.X  mode
The identifier
.X FMT
is recognized and can be used to mask the file format and permission bits.
If
.X mode
is the left hand side operand of a binary operator then the
right hand side operand may be a string that is interpreted
as a
.IR chmod (1)
permission expression.
.TP
.X  mtime
.TP
.X  name
The current file name with no directory prefix.
.TP
.X  nlink
.TP
.X path
The full pathname of the current file.
.TP
.X  perm
The file permission bits of
.XR mode .
If
.X perm
is the left hand side operand of a binary operator then the
right hand side operand may be a string that is interpreted
as a
.IR chmod (1)
permission expression.
.TP
.X  rdev
.TP
.X  size
.TP
.X status
The
.X "struct FTW"
.X status
field as defined in
.IR ftwalk (3).
This field may be assigned.
The symbols
.XR AGAIN ,
.XR FOLLOW ,
.X NOPOST
and
.X SKIP
are recognized and correspond to the constants prefixed by
.XR FTW_ .
.X status=SKIP
may be used to prune subdirectories from the tree traversal.
.TP
.X  type
The file type bits of
.XR mode .
The identifiers
.XR BLK ,
.XR CHR ,
.XR DIR ,
.XR FIFO ,
.XR LNK ,
.X REG
and
.X SOCK
are recognized.
.TP
.X  uid
If
.X uid
is the left hand side operand of a binary operator then the
right hand side operand may be a string that is interpreted
as a user name.
.TP
.X uidok
.X 1
if
.X uid
is a valid user id in the system database,
.X 0
otherwise.
.TP
.X visit
An integer variable associated with each unique object visited.
Objects are identified using the
.X st_dev
and
.X st_ino
status fields.
This field may be assigned.
The initial value is 0.
Multiple
.X visit
elements may be declared by
.XI "int visit." element1... ; .
In this case the
.X visit
field itself is not accessible.
.PP
Field identifiers may be prefixed by 1 or more
.X parent.
references, accessing parent directory status information.
The parent status information of a top level object is the same as the object
except that
.X name
and
.X path
are undefined.
If a field identifier is immediately preceded by
.IB string .
then
.I string
is a file pathname from which the status is taken.
.PP
The following
.IR expr (3)
functions are also supported:
.TP
.XI exit( expr )
Causes
.I tw
to exit with the exit code
.IR expr .
.I expr
defaults to
.X 0
if omitted.
.TP
.XI printf( format [, arg... ])
.PD 0
.XI eprintf( format [, arg... ])
.PD
Print the arguments on
.X stdout
.RX ( stderr )
using the
.IR printf (3)
specification
.IR format .
The
.X h
(short) format modifier is not supported.
.TP
.XI query( format [, arg... ])
Prompt with the
.IR printf (3)
message on
.X stderr
for an interactive response.
A line beginning with
.B y
returns 1,
.B q
or
.B EOF
causes 
.I tw
to exit immediately, and any other input returns 0.
.SH EXAMPLES
.EX
tw
.EE
Lists the current directory tree.
.EX
tw chmod go-w
.EE
Turns off the group and other write permissions for all files in the
current directory tree using a minimal amount of
.IR chmod (1)
command execs.
.EX
tw -e "uid != 'bozo' || (mode & 'go=w')"
.EE
Lists all files in the current directory that don't belong to the user
.X bozo
or that have group or other write permission.
.EX
tw -m -d / -e "fstype == '/'.fstype && mtime > '/etc/backup.time'.mtime"
.EE
Lists all files and intermediate directories on the same file system type as
.X /
that are newer than the file
.XR /etc/backup.time .
.EX
tw - chmod +x < commands
.EE
Executes
.X "chmod +x"
on the pathnames listed in the file
.XR commands .
.EX
tw -e "
int count;
action:
    count++;
    printf('name=%s inode=%08ld\en', name, ino);
end:
    printf('%d file%s\en', count, count == 1 ? '' : 's');
"
.EE
Lists the name and inode number of each file and also the total
number of files.
.EX
tw \-pP \-e "
action:
    if (visit++ == 0) {
        parent.local += local + blocks;
        if (type == DIR) printf('%d\et%s\en', local + blocks, path);
    }
"
.EE
Exercise to the reader.
.SH "SEE ALSO"
chmod(1), ksh(1), execvp(2), stat(2), expr(3), ftwalk(3), printf(3), tm(3)
